<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bc.pmpheep.back.commuser.personalcenter.dao.PersonalDao">


	<resultMap id="BaseResultMap" type="Map"><!-- com.bc.pmpheep.back.commuser.personalcenter.bean.PersonalNewMessage -->
		<id column="id" property="id" />
		<result column="msg_type" property="msg_type" />
		<result column="bookname" property="book_name" />
		<result column="buy_url" property="buy_url" />
		<result column="image_url" property="image_url" />
		<result column="category_id" property="category_id" />
		<result column="realname" property="realname" />
		<result column="avatar" property="avatar" />
		<result column="group_image" property="group_image" />
		<result column="group_name" property="group_name" />
		<result column="grouppeo" property="grouppeo" />
		<result column="gmt_create" property="gmt_create" />
		<result column="online_progress" property="online_progress" />
		<result column="material_name" property="material_name" />
		<result column="gmt_update" property="gmt_update" />
		<result column="title" property="title" />
		<result column="summary" property="summary" />
		<result column="auth_status" property="auth_status" />
		<result column="score" property="score" />
		<result column="content" property="content" />
		<result column="age_deadline" property="age_deadline" />
		<result column="exmember" property="exmember" />
		<result column="iamin" property="iamin" />
		<result column="is_staging" property="is_staging" />
		<result column="material_id" property="material_id" />
		<result column="datebase" property="datebase" />
		<result column="notNullIfFirstManager" property="notNullIfFirstManager" />
		<result column="textbook_id" property="textbook_id" />


	</resultMap>

	<!-- 查询最新收藏信息 -->
	<select id="ListMyConlection" resultMap="BaseResultMap">
		select * from book_user_mark a left join book b on a.book_id=b.id where
		a.writer_id=#{id}
		limit 0,6
	</select>
	<!-- 查好友信息 -->
	<select id="ListMyFriend" resultMap="BaseResultMap">
		select
		b.realname
		,b.id
		,b.avatar
		from
		writer_friend a
		left join writer_user b
		on a.target_id=b.id or a.request_id = b.id
		WHERE (a.target_id= #{id} or a.request_id = #{id})
		and b.id != #{id}
		AND a.status=2
		group by b.id

	</select>
	<!-- 查小组信息 -->
	<select id="ListMyGroup" resultMap="BaseResultMap">
		SELECT c.group_id,c.group_name,c.group_image,d.grouppeo from (select
		a.group_id,b.group_name,b.group_image from pmph_group_member a left
		join pmph_group b on a.group_id=b.id WHERE a.user_id=#{id} ) c left
		JOIN
		(select a.group_id,b.group_name,b.group_image,COUNT(b.group_name ) AS
		grouppeo from pmph_group_member a left join pmph_group b on
		a.group_id=b.id group BY a.group_id) d
		on c.group_id=d.group_id
		limit 0,9
	</select>
	<!-- 查申报最新动态信息 -->
	<select id="ListMyOfeerTwo" resultMap="BaseResultMap">
		SELECT
		a.material_id,
		a.user_id,
		a.realname,
		DATE_FORMAT(a.gmt_create,'%Y-%m-%d %h:%i') as gmt_create,
		a.online_progress,
		b.material_name,
		DATE_FORMAT(a.gmt_update,'%Y-%m-%d %h:%i') as gmt_update,
		'1' msg_type
		FROM
		declaration a
		LEFT JOIN material b ON a.material_id = b.id
		WHERE
		a.user_id = #{id}
		AND a.is_deleted = '0'
		AND a.online_progress IN (2, 3)
	</select>
	<!-- 查最新文章动态 -->
	<select id="ListMyWritingsTwo" resultMap="BaseResultMap"
		parameterType="PageParameter">
		SELECT
		cc.id
		,cc.title
		,cc.summary
		,cc.auth_status
		,cc.is_staging
		,case
		when cc.gmt_update = '0000-00-00 00:00:00'
		then DATE_FORMAT(cc.gmt_create,'%Y-%m-%d %H:%i') 
		else 
		DATE_FORMAT(cc.gmt_update,'%Y-%m-%d %H:%i') 
		end
		as gmt_update
		, '2' msg_type
		from cms_content cc
		inner join cms_category ct on cc.category_id = ct.id and ct.category_name =
		'医学随笔'
		where cc.author_id=#{parameter.logUserId} and cc.is_deleted !='1'
		<if test="parameter.auth_status != null and parameter.auth_status != '' ">
			and cc.auth_status = #{parameter.auth_status}
		</if>
		<if test="parameter.is_staging != null and parameter.is_staging != '' ">
			and cc.is_staging = #{parameter.is_staging}
		</if>
		limit ${start},${pageSize}
	</select>

	<!-- 查最新文章动态总数 -->
	<select id="queryMyWritingsNewCount" resultType="Integer"
		parameterType="PageParameter">
		select count(*) from
		(
		SELECT cc.id
		from cms_content cc
		inner join cms_category ct on cc.category_id = ct.id and ct.category_name =
		'医学随笔'
		where cc.author_id=#{parameter.logUserId} and cc.is_deleted !='1'
		<if test="parameter.auth_status != null and parameter.auth_status != '' ">
			and cc.auth_status = #{parameter.auth_status}
		</if>
		<if test="parameter.is_staging != null and parameter.is_staging != '' ">
			and cc.is_staging = #{parameter.is_staging}
		</if>
		)t
	</select>

	<!-- 查最新书评动态 -->
	<select id="ListMyBookNewsTwo" resultMap="BaseResultMap"
		parameterType="PageParameter">
		select a.id,a.score,a.content,DATE_FORMAT(a.gmt_update,'%Y-%m-%d %h:%i') as
		gmt_update,b.bookname,b.image_url, '3' msg_type from book_user_comment
		a left JOIN book b ON a.book_id=b.id where a.writer_id=#{id} and
		a.is_deleted='0' and a.is_auth='1'
	</select>


	<!-- 查全部可申请的教材 -->
	<select id="ListAllBookJoin" resultMap="BaseResultMap"
		parameterType="PageParameter">
		SELECT
		max(c.online_progress) as online_progress,
		c.is_staging,
		a.deadline as age_deadline,
		a.material_name,
		COUNT(b.id) AS exmember,
		b.material_id,
		(TO_DAYS(NOW()) - TO_DAYS(a.deadline)) AS datebase,
		count(c.id) as iamin,
		c.id as declaration_id,
		dp.id as
		notNullIfFirstManager,
		dp.textbook_id
		FROM
		material a
		LEFT JOIN declaration b ON a.id = b.material_id
		LEFT JOIN declaration c ON a.id = c.material_id and c.user_id =
		#{parameter.logUserId} and c.online_progress != 2
		LEFT JOIN dec_position dp on c.id = dp.declaration_id and chosen_position
		in (4,12) and rank=1

		WHERE
		a.is_deleted = '0'
		AND a.is_public = '0'
		AND a.is_published = '1'
		<!-- AND b.online_progress not in (2) -->
		<if test="parameter.s!=null and parameter.s!= ''">AND c.id is not null </if>
		<if test="parameter.is_staging!=null and parameter.is_staging!= ''">AND c.is_staging =#{parameter.is_staging}</if>
		<if
			test="parameter.online_progress!=null and parameter.online_progress!= ''">AND c.online_progress=#{parameter.online_progress}</if>
		<if test="parameter.bookname!=null and parameter.bookname!= ''">AND a.material_name like
			CONCAT('%',#{parameter.bookname},'%')</if>
		<if test="parameter.dateinfo!=null and parameter.dateinfo ==1 ">AND (TO_DAYS(NOW()) - TO_DAYS(a.deadline)) &lt; 0</if>
		<if test="parameter.dateinfo!=null and parameter.dateinfo ==2 ">AND (TO_DAYS(NOW()) - TO_DAYS(a.deadline)) &gt; 0 </if>
		GROUP BY
		(a.id)
		limit ${start},${pageSize}
	</select>

	<select id="queryMyBooksJoinCount" resultType="Integer"
		parameterType="PageParameter">
		select count(*) from
		(
		SELECT
		max(c.online_progress) as online_progress,
		c.is_staging,
		a.deadline as age_deadline,
		a.material_name,
		COUNT(b.id) AS exmember,
		b.material_id,
		(TO_DAYS(NOW()) - TO_DAYS(a.deadline)) AS datebase,
		count(c.id) as iamin,
		c.id as declaration_id
		FROM
		material a
		LEFT JOIN declaration b ON a.id = b.material_id
		LEFT JOIN declaration c ON a.id = c.material_id and c.user_id =
		#{parameter.logUserId} and c.online_progress != 2
		WHERE
		a.is_deleted = '0'
		AND a.is_public = '0'
		AND a.is_published = '1'
		<!-- AND b.online_progress not in (2) -->
		<if test="parameter.s!=null and parameter.s!= ''">AND c.id is not null </if>
		<if test="parameter.is_staging!=null and parameter.is_staging!= ''">AND c.is_staging =#{parameter.is_staging}</if>
		<if
			test="parameter.online_progress!=null and parameter.online_progress!= ''">AND c.online_progress=#{parameter.online_progress}</if>
		<if test="parameter.bookname!=null and parameter.bookname!= ''">AND a.material_name like
			CONCAT('%',#{parameter.bookname},'%')</if>
		<if test="parameter.dateinfo!=null and parameter.dateinfo ==1 ">AND (TO_DAYS(NOW()) - TO_DAYS(a.deadline)) &lt; 0</if>
		<if test="parameter.dateinfo!=null and parameter.dateinfo ==2 ">AND (TO_DAYS(NOW()) - TO_DAYS(a.deadline)) &gt; 0 </if>
		GROUP BY
		(a.id)
		)t
	</select>




	<!-- 查询选题申报（个人中心 我要出书） -->
	<select id="queryMyTopicChoose" parameterType="PageParameter"
		resultType="Map">
		SELECT
		t.id,
		t.bookname,
		DATE_FORMAT(t.deadline,'%Y-%m-%d') as deadline,
		t.source,
		t.type,
		DATE_FORMAT(t.gmt_create,'%Y-%m-%d') as gmt_create,
		t.auth_progress
		FROM
		topic t
		<where>
			<if
				test="parameter.isMine!=null and parameter.isMine!='' and parameter.logUserId != null and parameter.logUserId != '' ">
				AND t.user_id = #{parameter.logUserId}
			</if>
			<if test="parameter.bookname != null and parameter.bookname!= '' ">
				AND t.bookname LIKE concat('%',#{parameter.bookname},'%')
			</if>
			<if
				test="parameter.auth_progress != null and parameter.auth_progress != '' ">
				AND t.auth_progress = #{parameter.auth_progress}
			</if>
		</where>
		limit ${start},${pageSize}

	</select>

	<select id="queryMyTopicChooseCount" parameterType="PageParameter"
		resultType="Integer">
		SELECT
		count(*)
		FROM
		topic t
		<where>
			<if
				test="parameter.isMine!=null and parameter.isMine!='' and parameter.logUserId != null and parameter.logUserId != '' ">
				AND t.user_id = #{parameter.logUserId}
			</if>
			<if test="parameter.bookname != null and parameter.bookname!= '' ">
				AND t.bookname LIKE concat('%',#{parameter.bookname},'%')
			</if>
			<if
				test="parameter.auth_progress != null and parameter.auth_progress != '' ">
				AND t.auth_progress = #{parameter.auth_progress}
			</if>
		</where>

	</select>

	<!-- 图书纠错 -->
	<select id="queryBookCorrectd" parameterType="PageParameter"
		resultType="Map">
		SELECT
		b.bookname,
		b.isbn,
		b.revision,
		b.author,
		b.image_url,
		bc.id,
		bc.book_id,
		bc.page,
		bc.line,
		bc.content,
		bc.attachment,
		bc.attachment_name,
		bc.is_author_replied,
		bc.author_reply
		FROM
		book AS b
		Inner Join book_editor AS be ON b.id = be.book_id
		Inner Join
		book_correction AS bc ON b.id = bc.book_id
		<where>
			be.author_id = #{parameter.logUserId}
			<if test="parameter.is_replied != null and parameter.is_replied != '' ">
				and bc.is_author_replied = #{parameter.is_replied}
			</if>
		</where>
		order by bc.is_author_replied asc , bc.gmt_create desc
		limit
		${start},${pageSize}
	</select>

	<!-- 图书纠错 总数 -->
	<select id="queryBookCorrectdCount" parameterType="PageParameter"
		resultType="Integer">

		select count(*) from
		(
		SELECT
		bc.book_id
		FROM
		book AS b
		Inner Join
		book_editor AS be ON b.id = be.book_id
		Inner Join book_correction AS bc
		ON b.id = bc.book_id
		WHERE
		be.author_id = #{parameter.logUserId}
		<if test="parameter.is_replied != null and parameter.is_replied != '' ">
			and bc.is_author_replied = #{parameter.is_replied}
		</if>
		)t
	</select>

	<!-- 图书纠错回复 -->
	<update id="authorReply" parameterType="Map">
		update book_correction
		set is_author_replied = 1
		,author_reply = #{author_reply}
		where id = #{id}
	</update>

	<!-- 我的纠错resultMap 主map为图书信息 -->
	<resultMap type="Map" id="MyBookCorrectionMap">
		<id property="book_id" column="book_id" />
		<result property="bookname" column="bookname" />
		<result property="isbn" column="isbn" />
		<result property="author" column="author" />
		<result property="image_url" column="image_url" />
		<!-- 该图书的多条纠错信息 -->
		<collection property="correctionList" javaType="ArrayList"
			ofType="Map">
			<id property="id" column="id" />
			<result property="page" column="page" />
			<result property="line" column="line" />
			<result property="content" column="content" />
			<result property="attachment" column="attachment" />
			<result property="attachment_name" column="attachment_name" />
			<result property="is_author_replied" column="is_author_replied" />
			<result property="is_editor_replied" column="is_editor_replied" />
			<result property="result" column="result" />
			<result property="reply_date" column="reply_date" />
			<result property="editor_reply" column="editor_reply" />
		</collection>
	</resultMap>

	<!-- 我的纠错 -->
	<select id="queryMyCorrection" parameterType="PageParameter"
		resultMap="MyBookCorrectionMap">
		SELECT
		b.bookname,
		b.isbn,
		b.author,
		b.image_url,
		bc.id,
		bc.book_id,
		bc.page,
		bc.line,
		bc.content,
		bc.attachment,
		bc.attachment_name,
		bc.is_editor_replied,
		bc.result,
		bc.reply_date,
		bc.editor_reply,
		bc.is_author_replied
		FROM
		book AS b
		Inner Join book_correction AS bc ON
		b.id = bc.book_id
		WHERE
		bc.user_id = #{parameter.logUserId}
		AND
		bc.is_deleted = '0'
		<if test="parameter.is_replied != null and parameter.is_replied != '' ">
			AND bc.is_editor_replied = #{parameter.is_replied}
		</if>
		order by bc.gmt_create desc
		limit ${start},${pageSize}
	</select>

	<select id="queryMyCorrectionCount" parameterType="PageParameter"
		resultType="Integer">
		select count(*) from
		(
		SELECT
		b.id
		FROM
		book AS b
		Inner Join book_correction AS bc ON b.id = bc.book_id
		WHERE
		bc.user_id = #{parameter.logUserId}
		AND bc.is_deleted = '0'
		<if test="parameter.is_replied != null and parameter.is_replied != '' ">
			AND bc.is_editor_replied = #{parameter.is_replied}
		</if>
		group by b.id
		)t
	</select>

	<!-- 我的评论resultMap 主map为图书信息 -->
	<resultMap type="Map" id="MyBookCommentMap">
		<id property="book_id" column="book_id" />
		<result property="bookname" column="bookname" />
		<result property="publish_date" column="publish_date" />
		<result property="author" column="author" />
		<result property="image_url" column="image_url" />
		<!-- 该图书的多条评论信息 -->
		<collection property="commentList" javaType="ArrayList"
			ofType="Map">
			<id property="id" column="id" />
			<result property="score" column="score" />
			<result property="content" column="content" />
			<result property="writer_id" column="writer_id" />
			<result property="is_hide" column="is_hide" />
			<result property="is_auth" column="is_auth" />
			<result property="auth_user_id" column="auth_user_id" />
			<result property="auth_date" column="auth_date" />
			<result property="is_deleted" column="is_deleted" />
			<result property="gmt_create" column="gmt_create" />
			<result property="gmt_update" column="gmt_update" />
		</collection>
	</resultMap>

	<!-- 我的评论 -->
	<select id="myComment" parameterType="PageParameter" resultMap="MyBookCommentMap">
		SELECT
		b.bookname,
		DATE_FORMAT(b.publish_date,'%Y年%m月%d日') AS publish_date,
		b.author,
		b.image_url,
		bc.id,
		bc.book_id,

		bc.content,
		bc.gmt_create,
		DATE_FORMAT(bc.gmt_update,'%Y年%m月%d日') AS gmt_update,
		bc.is_long
		FROM
		book_user_comment AS bc
		left Join book AS b ON b.id = bc.book_id
		WHERE
		bc.writer_id = #{parameter.logUserId}
		AND bc.is_deleted = '0'
		<if test="parameter.is_long != null and parameter.is_long != '' ">
			AND bc.is_long = #{parameter.is_long}
		</if>
		order by bc.gmt_create desc
		limit ${start},${pageSize}
	</select>

	<!-- 我的评论 总数 -->
	<select id="myCommentCount" parameterType="PageParameter"
		resultType="Integer">

		select count(*) from
		(
		SELECT
		b.bookname,
		b.publish_date,
		b.author,
		b.image_url,
		bc.id,
		bc.book_id,

		bc.content,
		bc.gmt_create,
		bc.gmt_update,
		bc.is_long
		FROM
		book_user_comment AS bc
		left Join book AS b ON b.id = bc.book_id
		WHERE
		bc.writer_id = #{parameter.logUserId}
		AND bc.is_deleted = '0'
		<if test="parameter.is_long != null and parameter.is_long != '' ">
			AND bc.is_long = #{parameter.is_long}
		</if>
		group by b.id

		)t
	</select>

	<!-- 我的问卷 -->
	<select id="mySurvey" parameterType="PageParameter" resultType="java.util.Map">
		select s.*, cast(DATE_FORMAT(s.end_date,'%Y%m%d%H%i%s') as decimal(16,0))  as enddate ,
		cast(DATE_FORMAT(CURRENT_TIMESTAMP(),'%Y%m%d%H%i%s') as decimal(16,0))  as curdate   
		from survey s   LEFT JOIN  survey_question_answer  a  on s.id=a.survey_id
 		where a.user_id=#{parameter.logUserId} 
  		limit ${start},${pageSize}
	</select>

	<!-- 我的问卷总数 -->
	<select id="mySurveyCount" parameterType="PageParameter"
		resultType="Integer">
		select count(*) from 
		survey s  LEFT JOIN 
		survey_question_answer  a  on s.id=a.survey_id  
 		where a.user_id=#{parameter.logUserId}
	</select>

	<!-- 查询单个调查对应的问题 -->
	<select id="getSurvey" resultType="map" parameterType="java.util.Map">
		SELECT a.*,d.title AS surveyTitle ,d.id
		FROM `survey_question` a
		LEFT JOIN `survey_template_question` b
		ON a.id= b.`question_id`
		LEFT JOIN `survey_template` c
		ON b.`template_id` = c.id
		LEFT JOIN survey d
		ON d.`template_id` = c.`id`
	</select>

	<!-- 查询问题对应的选项 -->
	<select id="getOptions" resultType="map">
		SELECT * FROM
		`survey_question_option`
		WHERE question_id=#{questionId}
	</select>

	<!-- 查询单选对应的答案 -->
	<select id="getAnswers" resultType="java.lang.String" parameterType="java.util.Map">
		select
		a.option_id FROM survey_question_answer a
		INNER JOIN
		survey_question_option o on o.id=a.option_id
		where
		a.question_id=#{questionId} and a.user_id=#{logUserId}
	</select>

	<!-- 查询多选对应的答案 -->
	<select id="getCheckAnswers" resultType="java.lang.String" parameterType="java.util.Map">
		select a.option_content FROM survey_question_answer a
		where
		a.question_id=#{questionId} and a.user_id=#{logUserId}
	</select>

	<!-- 查询填空对应的答案 -->
	<select id="getInpAnswers" resultType="java.lang.String" parameterType="java.util.Map">
		select
		a.option_content FROM survey_question_answer a
		where
		a.question_id=#{questionId} and a.user_id=#{logUserId}
	</select>




	<!-- 动态查询 -->
	<select id="queryWriterUserTrendst" parameterType="PageParameter"
		resultType="Map">
		select
		t.id,t.table_name,t.table_id
		,DATE_FORMAT(t.trendst_date,'%Y-%m-%d %H:%i') AS trendst_date
		,DATE_FORMAT(t.trendst_date,'%Y%m%d%H%i') AS trendst_date_num
		,t.trendst_type
		,tsjc.*,jcsb.*,sbwz.*,wdjc.*,wycs.*,wdsp.*
		from
		writer_user_trendst t
		left join
		(
		SELECT
		bc.id AS tsjc_id,
		'tsjc' AS tsjc_type,
		DATE_FORMAT(bc.gmt_create,'%Y年%m月%d日') AS tsjc_create_time,
		b.bookname
		AS tsjc_bookname,
		b.image_url AS tsjc_image_url,
		bc.book_id AS
		tsjc_book_id,
		bc.page AS tsjc_page,
		bc.line AS tsjc_line,
		bd.detail AS
		tsjc_detail,
		bc.content AS tsjc_content,
		u.realname AS tsjc_realname,
		bc.result AS tsjc_result,
		bc.is_editor_replied AS
		tsjc_is_editor_replied
		FROM
		book AS b
		Inner Join book_editor AS be ON
		b.id = be.book_id
		Inner Join book_correction AS bc ON b.id = bc.book_id
		Inner Join writer_user AS u ON bc.user_id = u.id
		left Join book_detail
		AS bd ON bd.book_id = b.id
		WHERE
		be.author_id = #{parameter.logUserId}
		ORDER BY
		bc.gmt_create DESC
		)tsjc
		on t.table_name = tsjc.tsjc_type and
		t.table_id=tsjc.tsjc_id

		left join
		(
		SELECT
		dp.id AS jcsb_id,
		'jcsb' AS jcsb_type,
		DATE_FORMAT(dp.gmt_update,'%Y年%m月%d日') AS jcsb_update_time,
		DATE_FORMAT(dp.gmt_create,'%Y年%m月%d日') AS jcsb_create_time,
		tb.textbook_name as jcsb_textbook_name,
		concat(
		case
		when dp.preset_position >= 8
		then '数字编委 '
		else ''
		end
		,
		case
		when dp.preset_position in (4,5,6,7,12,13,14,15)
		then '主编 '
		else ''
		end
		,
		case
		when dp.preset_position in (2,3,6,7,10,11,14,15)
		then '副主编 '
		else ''
		end
		,
		case
		when dp.preset_position in (1,3,5,7,9,11,13,15)
		then '编委 '
		else ''
		end
		) as jcsb_preset_position,
		concat(
		case
		when dp.chosen_position >= 8
		then '数字编委 '
		else ''
		end
		,
		case
		when dp.chosen_position in (4,5,6,7,12,13,14,15)
		then '主编 '
		else ''
		end
		,
		case
		when dp.chosen_position in (2,3,6,7,10,11,14,15)
		then '副主编 '
		else ''
		end
		,
		case
		when dp.chosen_position in (1,3,5,7,9,11,13,15)
		then '编委 '
		else ''
		end
		) as jcsb_chosen_position,
		d.online_progress as jcsb_online_progress,
		dp.rank as jcsb_rank
		FROM
		dec_position AS dp
		Inner Join declaration AS d
		ON dp.declaration_id = d.id
		Inner Join textbook AS tb ON dp.textbook_id
		= tb.id
		WHERE
		d.user_id = #{parameter.logUserId}
		order by dp.gmt_update
		)jcsb
		on t.table_name = jcsb.jcsb_type and t.table_id=jcsb.jcsb_id

		left join
		(
			 SELECT 
			cc.id  as sbwz_id
			,'sbwz' as sbwz_type
			,DATE_FORMAT(cc.gmt_create,'%Y年%m月%d日') AS sbwz_create_time
			 ,cc.title AS sbwz_title
			 ,cc.summary AS sbwz_summary
			 ,cc.auth_status AS sbwz_auth_status
			 ,cc.is_deleted AS sbwz_is_deleted
			 ,cc.mid AS sbwz_mid
			 from cms_content cc
			 inner join cms_category ct on cc.category_id = ct.id and ct.category_name = '医学随笔'
			 where cc.author_id=#{parameter.logUserId}
				  <!-- and cc.is_deleted !='1' -->
		order by cc.gmt_create
		)sbwz
		on t.table_name = sbwz.sbwz_type and
		t.table_id=sbwz.sbwz_id

		left join
		(
		SELECT
		bc.id AS wdjc_id,
		'wdjc' AS wdjc_type,
		DATE_FORMAT(bc.gmt_create,'%Y年%m月%d日') AS wdjc_create_time,
		b.bookname
		AS wdjc_bookname,
		b.image_url AS wdjc_image_url,
		bc.book_id AS
		wdjc_book_id,
		bd.detail AS wdjc_detail,
		bc.page AS wdjc_page,
		bc.line AS
		wdjc_line,
		bc.content AS wdjc_content,
		u.realname AS wdjc_realname,
		bc.is_deleted AS wdjc_is_deleted,
		bc.result AS wdjc_result,
		bc.is_editor_replied AS wdjc_is_editor_replied
				FROM
				book AS b
				Inner Join book_correction AS bc ON b.id = bc.book_id
				Inner Join writer_user AS u ON bc.user_id = u.id
				left  Join book_detail AS bd ON bd.book_id = b.id
				WHERE
				bc.user_id =  #{parameter.logUserId}
				AND bc.is_deleted =  '0' 
				
				order by  bc.gmt_create desc
		) wdjc
		on t.table_name = wdjc.wdjc_type and
		t.table_id=wdjc.wdjc_id

		left join
		(
		SELECT
		t.id AS wycs_id,
		'wycs' AS wycs_type,
		DATE_FORMAT(t.gmt_update,'%Y年%m月%d日') AS wycs_update_time,
		DATE_FORMAT(t.gmt_create,'%Y年%m月%d日') AS wycs_create_time,
		t.bookname
		AS wycs_bookname,
		t.auth_progress AS wycs_auth_progress
		FROM
		topic AS t
		WHERE
		t.user_id = #{parameter.logUserId} AND
		t.is_deleted = '0' AND
		t.auth_progress IN ('2', '3')

		order by t.gmt_update
		) wycs
		on t.table_name = wycs.wycs_type and
		t.table_id=wycs.wycs_id

		left join
		(
		SELECT
		a.id AS wdsp_id,
		'wdsp' AS wdsp_type,
		DATE_FORMAT(a.gmt_create,'%Y年%m月%d日') AS wdsp_create_time,
		b.bookname
		AS wdsp_bookname,
		b.image_url AS wdsp_image_url,
		b.id AS wdsp_book_id,
		a.score AS wdsp_score,
		a.content AS wdsp_content,
		a.is_deleted AS wdsp_is_deleted,
		bd.detail AS wdsp_detail,
		u.realname AS wdsp_realname,
		DATE_FORMAT(a.gmt_update,'%Y年%m月%d日') AS wdsp_update_time
		from
		book_user_comment a
		left JOIN book b ON a.book_id=b.id
		join writer_user u on a.writer_id = u.id
		left join book_detail bd on bd.book_id = b.id
		WHERE
		a.writer_id =  #{parameter.logUserId} 
		<!-- AND a.is_deleted =  '0'  -->
		) wdsp
		on t.table_name = wdsp.wdsp_type and t.table_id=wdsp.wdsp_id

		where t.writer_user_id = #{parameter.logUserId}
		order by t.trendst_date
		desc
		limit ${start},${pageSize}
	</select>

	<select id="queryWriterUserTrendstCount" parameterType="PageParameter"
		resultType="Integer">
		select count(*) from
		(
		select
		t.*
		from
		writer_user_trendst t
		left join
		(
		SELECT
		bc.id AS tsjc_id,
		'tsjc' AS tsjc_type
		FROM
		book AS b
		Inner Join book_editor AS be ON b.id = be.book_id
		Inner Join book_correction AS bc ON b.id = bc.book_id
		Inner Join writer_user AS u ON bc.user_id = u.id
		WHERE
		be.author_id = #{parameter.logUserId}
		ORDER BY
		bc.gmt_create DESC
		)tsjc
		on t.table_name = tsjc.tsjc_type and t.table_id=tsjc.tsjc_id

		left join
		(
		SELECT
		dp.id AS jcsb_id,
		'jcsb' AS jcsb_type
		FROM
		dec_position AS dp
		Inner Join declaration AS d ON dp.declaration_id = d.id
		Inner Join textbook AS tb ON dp.textbook_id = tb.id
		WHERE
		d.user_id = #{parameter.logUserId}
		order by dp.gmt_update
		)jcsb
		on t.table_name = jcsb.jcsb_type and t.table_id=jcsb.jcsb_id

		left join
		(
		SELECT
		cc.id as sbwz_id
		,'sbwz' as sbwz_type

		from cms_content cc
		inner join cms_category ct on cc.category_id = ct.id and ct.category_name =
		'医学随笔'
		where cc.author_id=#{parameter.logUserId}
		and cc.is_deleted !='1'
		order by cc.gmt_create
		)sbwz
		on t.table_name = sbwz.sbwz_type and t.table_id=sbwz.sbwz_id

		left join
		(
		SELECT
		bc.id AS wdjc_id,
		'wdjc' AS wdjc_type
		FROM
		book AS b
		Inner Join book_correction AS bc ON b.id = bc.book_id
		Inner Join writer_user AS u ON bc.user_id = u.id
		WHERE
		bc.user_id = #{parameter.logUserId}
		AND bc.is_deleted = '0'

		order by bc.gmt_create desc
		) wdjc
		on t.table_name = wdjc.wdjc_type and t.table_id=wdjc.wdjc_id

		left join
		(
		SELECT
		t.id AS wycs_id,
		'wycs' AS wycs_type
		FROM
		topic AS t
		WHERE
		t.user_id = #{parameter.logUserId} AND
		t.is_deleted = '0' AND
		t.auth_progress IN ('2', '3')

		order by t.gmt_update
		) wycs
		on t.table_name = wycs.wycs_type and t.table_id=wycs.wycs_id

		left join
		(
		SELECT
		a.id AS wdsp_id,
		'wdsp' AS wdsp_type
		from book_user_comment a left JOIN book b ON a.book_id=b.id
		WHERE
		a.writer_id = #{parameter.logUserId} AND
		a.is_deleted = '0'
		) wdsp
		on t.table_name = wdsp.wdsp_type and t.table_id=wdsp.wdsp_id
		where t.writer_user_id = #{parameter.logUserId}
		)t
	</select>




	<!-- 产生一条动态 -->
	<insert id="saveUserTrendst" parameterType="Map">
		insert into
		writer_user_trendst
		(table_name,table_id,trendst_type,writer_user_id)
		values(#{TrendstName},#{tableId},#{trendstType},#{writer_user_id})
	</insert>

	<!-- 通过图书纠错表主键查询被纠错图书的第一主编id -->
	<select id="queryFirstEditorByBookCorrectionId" parameterType="String"
		resultType="String">
		SELECT
		be.author_id
		FROM
		book_correction AS bc
		Inner Join
		book_editor AS be ON bc.book_id = be.book_id
		WHERE
		bc.id = #{id}
	</select>
	
	<!-- 伪删除我的纠错 同时根据纠错表主键和纠错人id 同时满足才删除 -->
	<update id="deleteMyCorrection" parameterType="Map">
		update book_correction
		set is_deleted = 1
		where 
		id= #{id} and user_id = #{logUserId}
	</update>
	
	<update id="deleteMyBookComment" parameterType="Map">
		update book_user_comment
		set is_deleted = 1
		where 
		id= #{id} and writer_id = #{logUserId}
	</update>




</mapper>