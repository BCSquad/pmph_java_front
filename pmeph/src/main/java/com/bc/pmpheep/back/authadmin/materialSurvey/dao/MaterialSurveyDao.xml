<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bc.pmpheep.back.authadmin.materialSurvey.dao.MaterialSurveyDao">

	<select id="getSurveyByMaterialId" parameterType="java.lang.Long" resultType="MaterialSurvey">
	  	select * from material_survey where (material_id=#{materIalId} or pre_version_material_id=#{materIalId}) and (type_id=1  or type_id=3) order by gmt_update
	</select>


	<select id="getSurveyQuestionBySurveyId" parameterType="java.lang.Long"  resultType="MaterialSurveyQuestion" >
		select * from material_survey_question where survey_id=#{surveyId}
	</select>

	<select id="getSurveyQuestionOptionByQuestionId"  parameterType="java.lang.Long"  resultType="MaterialSurveyQuestionOption">

		select  * from material_survey_question_option where  question_id=#{questionId}
	</select>

	<select id="getSurveyQuestionAnswerByQuestionId" parameterType="java.util.Map"  resultType="MaterialSurveyQuestionAnswer">
		select  * from material_survey_question_answer where question_id=#{questionId}
	</select>



	<insert id="insertQuestionAnswer" parameterType="java.util.List" >
		insert into material_survey_question_answer(user_id,user_type, question_id, option_id, option_content, gmt_create, survey_id) values
		<foreach item="item" collection="list" index="index" separator=",">
			(#{item.userId},#{item.userType},#{item.questionId},#{item.optionId},#{item.optionContent},#{item.gmtCreate},#{item.surveyId})

		</foreach>
	</insert>

	<!--查询调研表-->
	<select id="querySearchList" resultType="java.util.Map" parameterType="PageParameter">
		select t.title ,t.id,t.intro,t.required_for_material,c.required2,
		DATE_FORMAT(t.end_date,'%Y-%m-%d') as end_date,
		DATE_FORMAT(b.gmt_create,'%Y-%m-%d %H:%i') as gmt_create,
		DATE_FORMAT(t.gmt_create,'%Y-%m-%d %H:%i') as createTime
		from material_survey t
		left join material_survey_question_answer b on  b.survey_id=t.id
		and b.user_id=#{parameter.id}
		left JOIN (select *,max(required) as required2  from material_survey_chain GROUP BY  material_survey_id )c on c.material_id= t.material_id and t.id=c.material_survey_id
		where
		<choose>
			<when test="parameter.materialId !=null">
				(t.material_id =#{parameter.materialId}
				or
				t.pre_version_material_id=#{parameter.materialId})
			</when>
			<otherwise>
				t.material_id is null
			</otherwise>
		</choose>
		<if test="parameter.required != null and parameter.required != '' ">
			and  t.required_for_material =#{parameter.required}
		</if>
		<if test="parameter.state != null and parameter.state != '' and parameter.state == 1">
			and b.gmt_create is not NULL
		</if>
		<if test="parameter.state != null and parameter.state != '' and parameter.state == 2">
			and b.gmt_create is  NULL
		</if>

		and (t.type_id=1  or t.type_id=3)
        and t.status=1
		GROUP BY t.id limit ${start},${pageSize}
	</select>

	<!--查询调研表总数-->
	<select id="queryCount" resultType="Integer" parameterType="PageParameter">
		select count(*) from ( select id
		from material_survey where
		<choose>
			<when test="parameter.materialId !=null">
				(material_id =#{parameter.materialId}
				or
				pre_version_material_id=#{parameter.materialId})
			</when>
			<otherwise>
				material_id is null
			</otherwise>

		</choose>
		<if test="parameter.required != null and parameter.required != '' ">
			and  required_for_material =#{parameter.required}
		</if>

		and (type_id=1  or type_id=3) and status=1)q


	</select>

	<select id="getSurveyById" parameterType="java.lang.Long" resultType="MaterialSurvey">
		select * from material_survey where id=#{id}
	</select>

	<select id="getMaterialByid" resultType="Material" parameterType="java.lang.Long">
        select * from material where id=#{id}
    </select>


	<!--查询调研表-->
	<select id="checkFile" resultType="java.lang.Integer" parameterType="java.util.Map">
		select
		count(DISTINCT t.id)
        from material_survey t
        left join material_survey_question_answer b on  b.survey_id=t.id and b.user_id=#{id}
		left JOIN (select *,max(required) as required2  from material_survey_chain GROUP BY  material_survey_id )c on c.material_id= t.material_id and t.id=c.material_survey_id
     where
		<choose>
			<when test="materialId !=null">
				(t.material_id =#{materialId}
				or
				t.pre_version_material_id=#{materialId})
			</when>
			<otherwise>
				t.material_id is null
			</otherwise>
		</choose>
		<if test="state != null and state != '' and state == 1">
			and b.gmt_create is not NULL
		</if>
        <if test="state != null and state != '' and state == 2">
            and b.gmt_create is  NULL
        </if>
		<if test="required != null and required != '' and required == 1">
			and (t.required_for_material=1 or c.required2=1)
		</if>
        and t.status=1
		and (t.type_id=1  or t.type_id=3)

	</select>

	<!--查询与教材下图书有关的调研表-->
	<select id="querySearchByTextbookId" resultType="java.util.Map" parameterType="java.util.Map">
        select
            b.id,b.title,max(t.required),t.required,a.gmt_create
            from material_survey_chain t
            left join material_survey b on t.material_survey_id=b.id
            left join material_survey_question_answer a on a.survey_id=b.id
            where t.textbook_id in ${textbook_id} and b.all_textbook_used=0 and b.type_id != 1 and b.status=1
            group by b.id
    </select>

	<select id="queryAnswer" parameterType="java.util.Map" resultType="java.util.Map">
        select t.title,t.id,max(t.id),a.gmt_create
            from material_survey t
            left join material_survey_question_answer a on a.survey_id=t.id
            and a.user_id=#{user_id}  where t.material_id=#{material_id}
            and a.gmt_create is not null group by t.id
    </select>
</mapper>