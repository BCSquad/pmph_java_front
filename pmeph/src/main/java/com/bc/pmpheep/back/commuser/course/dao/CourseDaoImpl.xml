<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bc.pmpheep.back.commuser.course.dao.CourseDao">


    <sql id="teacherCourseParameter">
        <if test="parameter.name != null and parameter.name != '' ">
            and name like concat('%',#{parameter.name},'%')
        </if>
        <if test="parameter.published != null">
            and published = #{parameter.published}
        </if>
        <if test="parameter.orderPlaced != null">
            and order_placed = #{parameter.orderPlaced}
        </if>
        <if test="parameter.paid != null">
            and paid = #{parameter.paid}
        </if>
        <if test="parameter.status != null and parameter.status == '已截止' ">
            and TO_DAYS(NOW()) > TO_DAYS(end_date)
        </if>
    </sql>

    <select id="getTeacherCourseList" parameterType="PageParameter" resultType="CourseVO">
        select * from course
        where teacher_id = #{parameter.teacherId} and deleted = 0
        <include refid="teacherCourseParameter"></include>
              order by gmt_create desc
        <if test="start != null">
            limit #{start},#{pageSize}
        </if>
    </select>

    <select id="getTeacherCourseListCount" parameterType="PageParameter" resultType="int">
        select count(id)
        from course
        where teacher_id = #{parameter.teacherId}
        <include refid="teacherCourseParameter"></include>
    </select>

    <select id="getCourseById" parameterType="Long" resultType="CourseVO">
        select * from course where id = #{id}
    </select>

    <select id="getCourseBookListByCourseId" parameterType="Long" resultType="CourseBookVO">
        select cb.*,b.bookname,b.isbn
        ,cs.countStu,cr.countRes
        from
        course_book cb
        join book b on b.id = cb.book_id

        left join
        (select course_book_id,count(id) as countStu from course_book_student where deleted=0 GROUP by course_book_id)cs
        on cb.id = cs.course_book_id

        left join
        (select course_book_id,count(id) as countRes from course_book_student where deleted=0 and teacher_canceled =0 GROUP by course_book_id)cr
        on cb.id = cr.course_book_id

        where cb.course_id = #{id} and cb.deleted = 0
    </select>

    <!-- 获取已选图书的bookId列表-->
    <select id="getCourseAllBookId" parameterType="Long" resultType="Long">
        select cb.bookId from
        course_book cb
        where cb.course_id = #{id} and cb.deleted = 0
    </select>

    <select id="getCourseBookListCountByCourseId" parameterType="Long" resultType="int">
        select count(id) from course_book where course_id = #{id} and deleted = 0
    </select>

    <!--列出未选择的图书 供选择-->
    <select id="listBookUnSelected" parameterType="PageParameter" resultType="CourseBookVO">
        select b.id as bookId ,b.bookname,b.isbn,#{parameter.courseId} as courseId from
        book b
        where
        b.is_on_sale = 1
        and b.id not in
        (select cb.book_id from
        course_book cb
        where cb.course_id = #{parameter.courseId} and cb.deleted = 0)

        <if test="parameter.bookname != null and parameter.bookname != '' ">
            and b.bookname like concat('%',#{parameter.bookname},'%')
        </if>
        <if test="parameter.isbn != null and parameter.isbn != '' ">
            and b.isbn like concat('%',#{parameter.isbn},'%')
        </if>
        <if test="start != null">
            limit #{start},#{pageSize}
        </if>
    </select>
    <!--未选择的图书 供选择总数-->
    <select id="listBookUnSelectedCount" parameterType="Map" resultType="int">
        select count(id) from
        book b
        where b.is_on_sale = 1
        and b.id not in
        (select cb.book_id from
        course_book cb
        where cb.course_id = #{courseId} and cb.deleted = 0)
        <if test="bookname != null and bookname != '' ">
            and b.bookname like concat('%',#{bookname},'%')
        </if>
        <if test="isbn != null and isbn != '' ">
            and b.isbn like concat('%',#{isbn},'%')
        </if>
    </select>

    <!--批量插入课程图书-->
    <insert id="addCourseBookBatch" >
        insert INTO
        course_book(course_id,book_id)
        VALUES
        <foreach collection="bookIds" item="bookId" separator="," index="index">
            (#{courseId},#{bookId})
        </foreach>
        on duplicate key update deleted = 0
    </insert>

    <update id="courseBookDelete" parameterType="Long">
        update course_book set deleted = 1 where id = #{id}
    </update>

    <update id="updateCourseBook" parameterType="CourseBookVO">
        update course_book
        <set>
            <if test="courseId != null ">
                course_id	=	#{courseId}	,
            </if>
            <if test="bookId != null ">
                book_id	=	#{bookId}	,
            </if>
            <if test="note != null ">
                note	=	#{note}	,
            </if>
            <if test="deleted != null ">
                deleted	=	#{deleted}	,
            </if>
        </set>
        where id = #{id}
    </update>

    <!--新增或更新课程基本信息-->
    <insert id="saveCourse" useGeneratedKeys="true" keyProperty="id" parameterType="CourseVO">
        insert into
        course(
        <trim suffixOverrides=",">
            <if test="id != null ">
                id	,
            </if>
            <if test="name != null and name != '' ">
                name	,
            </if>
            <if test="note != null ">
                note	,
            </if>

                begin_date	,

                end_date	,

            <if test="stuRepreUsername != null ">
                stu_repre_username	,
            </if>
            <if test="published != null ">
                published	,
            </if>
            <if test="orderPlaced != null ">
                order_placed	,
            </if>
            <if test="paid != null ">
                paid	,
            </if>
            <if test="deleted != null ">
                deleted	,
            </if>
            <if test="teacherId != null ">
                teacher_id	,
            </if>
        </trim>
        )
        VALUES(
        <trim suffixOverrides=",">
            <if test="id != null ">
                #{id}	,
            </if>
            <if test="name != null and name != '' ">
                #{name}	,
            </if>
            <if test="note != null ">
                #{note}	,
            </if>

                #{beginDate}	,

                #{endDate}	,

            <if test="stuRepreUsername != null ">
                #{stuRepreUsername}	,
            </if>
            <if test="published != null ">
                #{published}	,
            </if>
            <if test="orderPlaced != null ">
                #{orderPlaced}	,
            </if>
            <if test="paid != null ">
                #{paid}	,
            </if>
            <if test="deleted != null ">
                #{deleted}	,
            </if>
            <if test="teacherId != null ">
                #{teacherId}	,
            </if>
        </trim>
        )
        on duplicate key update
        <trim suffixOverrides=",">
            <if test="id != null ">
                id	=	values(id)	,
            </if>
            <if test="name != null and name != '' ">
                name	=	values(name)	,
            </if>
            <if test="note != null ">
                note	=	values(note)	,
            </if>

                begin_date	=	values(begin_date)	,


                end_date	=	values(end_date)	,

            <if test="stuRepreUsername != null ">
                stu_repre_username	=	values(stu_repre_username)	,
            </if>
            <if test="published != null ">
                published	=	values(published)	,
            </if>
            <if test="orderPlaced != null ">
                order_placed	=	values(order_placed)	,
            </if>
            <if test="paid != null ">
                paid	=	values(paid)	,
            </if>
            <if test="deleted != null ">
                deleted	=	values(deleted)	,
            </if>
            <if test="teacherId != null ">
                teacher_id	=	values(teacher_id)	,
            </if>
        </trim>
    </insert>

    <!--删除课程下所有图书-->
    <update id="courseBookDeleteByCourseId" parameterType="Long" >
        update course_book set deleted = 1 where course_id = #{id}
    </update>

    <insert id="saveCourseBookList" parameterType="CourseBookVO" >
        insert into course_book(
                  id	,
                  course_id	,
                  book_id	,
                  note
        )
        VALUES
        <foreach collection="list" item="b" separator="," index="index">
            (#{b.id},#{b.courseId},#{b.bookId},ifNull(#{b.note},''))
        </foreach>
        on duplicate key UPDATE
                    course_id = VALUES(course_id),
                    note	=	VALUES(note),
                    deleted = 0
    </insert>

    <select id="queryCountWriterUserByUsername" parameterType="String" resultType="int">
        select count(*) from writer_user where username = #{username}
    </select>

    <update id="courseStatusModify" parameterType="CourseVO" >
        update course
        <set>
            <if test="deleted != null">
                deleted = #{deleted},
            </if>
            <if test="published != null">
                published = #{published},
            </if>
            <if test="orderPlaced != null">
                order_placed = #{orderPlaced},
            </if>
            <if test="paid != null">
                paid = #{paid},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="querybookStudentList" parameterType="PageParameter" resultType="CourseBookStudentVO">
        select cbs.*,cs.name as student_name,cs.class_name,cs.student_id,cs.telephone
        from
        (
            select cbs.*,(select course_id from course_book where id = #{parameter.courseBookId})course_id
            from
            (
                select * from
                course_book_student
                where course_book_id = #{parameter.courseBookId} and deleted = 0
            )cbs
        )cbs
        left join course_student cs on cs.course_id = cbs.course_id and cbs.writer_user_id = cs.writer_user_id and cs.deleted = 0
        <where>
            <if test="parameter.studentName != null and parameter.studentName != '' ">
                and cs.name like concat('%',#{parameter.studentName},'%')
            </if>
            <if test="parameter.className != null and parameter.className != '' ">
                and cs.class_name like concat('%',#{parameter.className},'%')
            </if>
            <if test="parameter.studentId != null and parameter.studentId != '' ">
                and cs.student_id like concat('%',#{parameter.studentId},'%')
            </if>
            <if test="parameter.telephone != null and parameter.telephone != '' ">
                and cs.telephone like concat('%',#{parameter.telephone},'%')
            </if>
        </where>
        <if test="start != null">
            limit #{start} , #{pageSize}
        </if>

    </select>

    <select id="querybookStudentListCount" parameterType="PageParameter" resultType="int">

        select count(distinct cbs.id)
        from
        (
            select cbs.*,(select course_id from course_book where id = #{parameter.courseBookId})course_id
            from
                (
                    select * from
                    course_book_student
                    where course_book_id = #{parameter.courseBookId} and deleted = 0
                )cbs
        )cbs
        left join course_student cs on cs.course_id = cbs.course_id and cbs.writer_user_id = cs.writer_user_id and cs.deleted = 0
        <where>
            <if test="parameter.studentName != null and parameter.studentName != '' ">
                and cs.name like concat('%',#{parameter.studentName},'%')
            </if>
            <if test="parameter.className != null and parameter.className != '' ">
                and cs.class_name like concat('%',#{parameter.className},'%')
            </if>
            <if test="parameter.studentId != null and parameter.studentId != '' ">
                and cs.student_id like concat('%',#{parameter.studentId},'%')
            </if>
            <if test="parameter.telephone != null and parameter.telephone != '' ">
                and cs.telephone like concat('%',#{parameter.telephone},'%')
            </if>
        </where>

    </select>

    <update id="updateCourseBookStudent" parameterType="CourseBookStudentVO" >
        update course_book_student
        <set>
            <if test="note != null ">
                note	=	#{note}	,
            </if>
            <if test="deleted != null ">
                deleted	=	#{deleted}	,
            </if>
            <if test="teacherCanceled != null ">
                teacher_canceled	=	#{teacherCanceled}	,
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="getCountResByCourseBookId" parameterType="Long" resultType="int">
        select count(id) as countRes
        from course_book_student
        where
        deleted=0 and teacher_canceled =0
        and course_book_id = #{id}
    </select>

    <!--清单的excel或打印用 查询课程下学生列表-->
    <select id="getCourseStudentByCourseId" parameterType="Long" resultType="Map">
        select
        writer_user_id as writerUserId,
        name as studentName,
        student_id as studentId,
        class_name as className,
        telephone
         from course_student where course_id = #{courseId} and deleted = 0
    </select>

    <select id="queryCourseBook2WriterUserChain" parameterType="Long" resultType="String">
        select concat(course_book_id,'-',writer_user_id) as courseBookId2writerUserId
        from course_book_student
        where deleted = 0 and
        course_book_id in (select id from course_book where course_id = #{courseId})
    </select>

</mapper>