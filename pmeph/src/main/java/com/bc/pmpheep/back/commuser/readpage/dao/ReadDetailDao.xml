<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bc.pmpheep.back.commuser.readpage.dao.ReadDetailDao" >
    <resultMap id="readdetailmMap" type="java.util.Map">
    </resultMap>
	<!-- 根据书籍ID查询数据相关信息 -->
	<select id="queryReadBook" parameterType="java.util.Map" resultMap="readdetailmMap">
		select 
		  t.*,
	      b.detail
	      from book t 
	      left join book_detail b  on t.id=b.book_id where t.id=#{id}		 
	</select>
	
	<!-- 查询视频3条 -->
	<select id="queryVideo" parameterType="java.util.Map" resultMap="readdetailmMap">
	    select * from book_video where book_id=#{book_id} and is_auth=1 limit 0,3
	</select>

	<!--查询书籍微视频  -->
	<select id="queryMoreBookVidos" parameterType="map" resultType="java.util.Map">
		 select * from book_video where book_id=#{id} and is_auth=1
		limit #{startnum},#{size}
	</select>
	<!-- 查询教材微中书籍微视频的总数 -->
	<select id="queryMoreBookVidosCount" parameterType="map" resultType="int">
		select count(1) from book_video where book_id=#{id} and is_auth=1
	</select>

	
	<!-- 根据书籍ID查询书籍评论信息 -->
	<select id="queryComment" parameterType="java.util.Map" resultType="java.util.Map">
	   select 
	     t.content,
	     t.gmt_create,
	     t.score,
	     b.realname,
	     b.nickname,
		 b.username,
	     b.avatar
	     from book_user_comment t 
	     left join book u on t.book_id=u.id
	     left join writer_user b on b.id=t.writer_id where u.id=#{id} and t.is_long=0
	     and t.is_auth='1' and t.is_deleted='0'
	     order by t.sort*t.is_stick DESC , t.gmt_create desc
	     <if test="start >= 0">
	        limit #{start},3
	     </if>
	</select>

	<!-- 根据书籍ID查询纠错信息 -->
	<select id="queryCorrectByBookId" parameterType="java.util.Map" resultType="java.util.Map">
		select
		bc.content,
		bc.gmt_create,
		bc.page,
		bc.line,
		bc.is_editor_replied,
		bc.editor_reply,
		bc.result,
		u.realname,
		u.nickname,
		u.username,
		u.avatar
		from
		book_correction bc
		left join writer_user u on bc.user_id = u.id
		where bc.is_deleted =0 and gmt_show > '0000-00-00 00:00:00' and bc.book_id = #{id}
		order by bc.gmt_show DESC
		<if test="start >= 0">
			limit #{start},3
		</if>
	</select>

	<!-- 根据书籍ID查询反馈信息 -->
	<select id="queryFeedBackByBookId" parameterType="java.util.Map" resultType="java.util.Map">
		select
		f.content,
		f.gmt_create,
		u.realname,
		u.nickname,
		u.username,
		u.avatar
		from
		book_user_feedback f
		left join writer_user u on f.user_id = u.id
		where f.is_deleted =0 and f.gmt_show > '0000-00-00 00:00:00' and f.book_id = #{id}
		order by f.gmt_show DESC
		<if test="start >= 0">
			limit #{start},3
		</if>
	</select>

	<!-- 查询一共有多少条数据 -->
	<select id="querySize" parameterType="java.util.Map" resultType="int">
	   select count(*) from book_user_comment where book_id=#{book_id}
	</select>
	<!-- 根据书籍ID查询配套图书 -->
	<select id="querySupport" parameterType="java.util.Map" resultType="java.util.Map">
	    select 
		    t.bookname,
		    t.image_url,
	        t.author,
		    b.detail,
		    t.id
		    from book t left join book_support c on  c.support_id=t.id 
		    left join book_detail b on b.book_id=t.id 
		    where t.is_on_sale=1 and t.id in (select support_id from book_support where book_id=#{id}) 
		    limit 0,1
	</select>
	<!-- 查询人卫推荐书籍 -->
	<select id="queryRecommendByE" parameterType="java.util.Map" resultType="java.util.Map">
	    select bookname,author,id
	       from book t 
	       where t.is_promote != 0 and t.is_promote is not null
	    <if test="x >= 0">
	        limit #{x},5
	    </if>
	</select>
			<!-- 根据评论ID删除评论 -->
	<update id="updateDelBookWriter"  parameterType="java.util.Map">
		update book_user_comment set 
		is_deleted = 1
		gmt_update = sysdate()
		where id = #{bookwriterid}
	</update>
	
	<!-- 根据书籍ID新增评论 -->
	<insert id="insertComment" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="table_trendst_id">
	   insert into book_user_comment(
	   book_id,
	   writer_id,
	   score,
	   content
	   )values(
	   #{book_id},
	   #{writer_id},
	   #{score},
	   #{content})
	</insert>
	<!-- 根据作者查询该作者写的书 -->
	<select id="queryAuthorType" parameterType="java.util.Map" resultType="java.util.Map">
	   select * from book where author like #{author} limit 0,9
	</select>
	<!-- 作者所写的书本数不足9本，根据书籍类型补足9本 -->
	<select id="queryBookByType" parameterType="java.util.Map" resultType="java.util.Map">
	   select * from book where type=#{type} and author<![CDATA[<>]]>#{author} limit 0,#{x} 
	</select>
	<!-- 相关推荐换一换 -->
	<select id="fresh" parameterType="java.util.Map" resultType="java.util.Map">
	   select * from book where type=#{type} Order By rand()  limit 0,#{row}
	</select>
	<!-- 查询后台配置的某书某类相关图书总数 -->
	<select id="queryRelatedBookListCount" resultType="int" parameterType="Map">
		select count(id) from book_book_relationship 
		where main_book_id = #{id} and type = #{type}
	</select>
	<!-- 查询后台配置的某书某类相关图书 -->
	<select id="queryRelatedBookList" resultType="Map" parameterType="Map">
		select b.* 
		from book_book_relationship bb
		left join book b on b.id = bb.related_book_id
		where bb.main_book_id = #{id} and bb.type = #{type}
		group by b.id
		order by bb.gmt_create desc
		limit #{start},#{pageSize}
	</select>
	
	
	
	<!-- 根据书籍ID改变点赞数 -->
	<update id="addlikes" parameterType="java.util.Map"> 
	   update book set likes=#{likes} where id=#{book_id}
	</update>
	<!-- 往书籍点赞表里面添加数据 -->
	<insert id="insertlikes" parameterType="java.util.Map">
	   insert into book_user_like (book_id,writer_id) values (#{book_id},#{writer_id})
	</insert>
	<!-- 查询是否点过赞 -->
	<select id="queryLikes" parameterType="java.util.Map" resultType="java.util.Map">
	  select * from book_user_like where book_id=#{book_id} and writer_id=#{writer_id}
	</select>
	<!-- 根据ID删除点赞记录 -->
	<update id="dellikes" parameterType="java.util.Map"> 
	  delete from book_user_like where id=#{id}
	</update>
	<!-- 查询用户收藏夹下是否已收藏此书籍  -->
	<select id="queryMark" parameterType="map" resultType="int">
	  select count(id) from book_user_mark where book_id=#{bookId} and writer_id=#{writerId} and favorite_id=#{favoriteId}
	</select>
	<!-- 添加书籍收藏 -->
	<insert id="insertMark" parameterType="map">
	    insert into book_user_mark(book_id,writer_id,favorite_id)  values(#{bookId},#{writerId},#{favoriteId})
	</insert>
	<!-- 更新书籍的收藏数量 -->
	<update id="updateMarks" parameterType="map">
	   update book set bookmarks=#{marks} where id=#{bookId}
	</update>
	<!-- 查询书籍的收藏数 -->
	<select id="queryBookMarks" parameterType="java.util.Map" resultType="long">
	  select bookmarks from book where id=#{bookId}
	</select>
	<!-- 查询默认收藏夹 -->
	<select id="queryDedaultFavorite" parameterType="map" resultType="java.util.Map">
	    select * from writer_book_favorite where writer_id=#{writerId} and favorite_name='默认收藏夹'
	</select>
	<!--添加默认收藏夹  -->
	<insert id="insertFavorite" parameterType="map">
	   insert into writer_book_favorite(writer_id,favorite_name) values(#{writerId},'默认收藏夹')
	</insert>
	<!-- 删除一本书的收藏记录 -->
	<delete id="deleteMark" parameterType="map" >
	    delete from book_user_mark where writer_id=#{writerId} and  favorite_id=#{favoriteId} and book_id=#{bookId}
	</delete>
	<!-- 新增图书纠错 -->
	<insert id="correction" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="table_trendst_id">
	    insert into book_correction (
	    book_id,
	    user_id,
	    page,
	    line,
	    content,
	    attachment,
	    attachment_name
	    )values(
	    #{book_id},
	    #{user_id},
	    #{page},
	    #{line},
	    #{content},
	    #{attachment},
	    #{attachment_name}
	    );
	</insert>
	<!-- 新增图书长评 -->
	<insert id="insertlong" parameterType="java.util.Map" useGeneratedKeys="true" keyProperty="table_trendst_id">
	     insert into book_user_comment(
	     book_id,
	     writer_id,
	     is_long,
	     score,
	     content,
	     title,
	     is_self_rating
	     )values(
	     #{book_id},
	     #{writer_id},
	     #{is_long},
	     #{score},
	     #{content},
	     #{title},
	     #{is_self_rating}
	     
	     
	     );   
	</insert>
	
	<select id="queryEditor" parameterType="java.util.Map" resultType="Map">
		select 
		 *
	     from 
	     book_editor be
	     where book_id = #{book_id}
	     group by book_id
	</select>
	
	
	<!-- 查询登录人是否写过长评 -->
	<select id="queryLoginLong" parameterType="java.util.Map" resultType="java.util.Map">
	    select * from book_user_comment where writer_id=#{writer_id} and book_id=#{book_id} and is_long=1
	</select>
	<!-- 查询长评 --> 
	<select id="queryLong" parameterType="java.util.Map" resultType="java.util.Map">
	    select
	     t.content,
	     t.score,
	     t.title,
	     t.gmt_create,
	     b.nickname,
	     b.avatar
	     from book_user_comment t 
	     left join writer_user b
	     on t.writer_id=b.id 
	     where t.book_id=#{book_id} and t.is_long =1 and is_hide=0 and t.is_auth = 1
	     order by t.sort*t.is_stick DESC , t.gmt_create desc
	     <if test="start >= 0">
	        limit #{start},3
	     </if> 
	    
	</select>
	<!-- 根据ID增加点击数 -->
	<update id="changeClicks" parameterType="java.util.Map">
	    update book set clicks=#{clicks} where id=#{book_id}
	</update>
	
		<!-- 查询我的长评 -->
	<select id="queryMyLong" parameterType="java.util.Map" resultType="java.util.Map">
	    select * from book_user_comment where  book_id=#{book_id} and is_long=1 and id=#{id}
	</select>
	
	<!-- 我的长评修改 -->
	<update id="updateCommentLong" parameterType="java.util.Map">
		UPDATE
		book_user_comment AS bc SET bc.score=#{score},bc.content=#{content},bc.title=#{title} where
		id=#{id} and bc.is_long =1 and bc.is_auth = 0
	</update>
	
	<insert id="bookfeedback" parameterType="Map">
		insert into book_user_feedback (book_id,user_id,content)
		values(#{book_id},#{user_id},#{content})
	</insert>
	
</mapper>